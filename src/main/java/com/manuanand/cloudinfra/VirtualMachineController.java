package com.manuanand.cloudinfra;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.server.ResponseStatusException;

@Controller	// This means that this class is a Controller
@RequestMapping(path="/virtualmachine") // This means URL's start with /virtualmachine (after Application path)
public class VirtualMachineController {
	@Autowired // This means to get the bean called nodeRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private NodeRepository nodeRepository;

	@Autowired // This means to get the bean called nodeRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private VirtualMachineRepository virtualMachineRepository;

	@Autowired
	private UserRepository userRepository;
	
	///
	// Node Repository
	///
	@PostMapping(path="/create") // Map ONLY POST Requests
	public @ResponseBody VirtualMachine createVirtualMachine (
			@RequestParam Integer userId, @RequestParam int numCores) {
		
		if (numCores <= 0) {
			throw new ResponseStatusException(
					  HttpStatus.BAD_REQUEST, "Invalid value for num cores - " + numCores);
		}
		
		// Verify customer ID Exists
		Optional<User> user = userRepository.findById(userId);
		if (user.isEmpty()) {
			throw new ResponseStatusException(
					  HttpStatus.NOT_FOUND, "User with ID" + userId + " not found");
		}
		
		// Find all nodes that can satisfy this request
		Iterable<Node> nodes = nodeRepository.findAll();
		Node chosenNode = null;
		for (Node node : nodes) {
			if (node.getTotalCores() - node.getUsedCores() > numCores) {
				chosenNode = node;
				break;
			}
		}
		
		if (chosenNode == null) {
			throw new ResponseStatusException(
				  HttpStatus.BAD_REQUEST, "Not enough free nodes to get " + numCores + " cores" );
		}
		
		// Update node table to deduct the cores
		chosenNode.setUsedCores(numCores + chosenNode.getUsedCores());
		nodeRepository.save(chosenNode);
		
		// Create Virtual Machine
		VirtualMachine newVirtualMachine = new VirtualMachine();
		newVirtualMachine.setUserId(userId);
		newVirtualMachine.setNumCores(numCores);
		newVirtualMachine.setNodeId(chosenNode.getId());
		
		virtualMachineRepository.save(newVirtualMachine);
		
		return newVirtualMachine;
	}
	
	@GetMapping(path="/")
	public @ResponseBody Iterable<VirtualMachine> getAllVirtualMachines() {
		
		// This returns a JSON or XML with the users
		return virtualMachineRepository.findAll();
	}

	@GetMapping(path="/{id}")
	public @ResponseBody VirtualMachine getSpecificVirtualMachine(@PathVariable String id) {
		
		Integer virtualMachineId = null;
		try {
			virtualMachineId = Integer.parseInt(id);
		} catch (NumberFormatException ex) {
			return null;
		}

		Optional<VirtualMachine> virtualMachine = virtualMachineRepository.findById(virtualMachineId);
		if (!virtualMachine.isEmpty()) {
			return virtualMachine.get();
		} 

		return null;
	}
}